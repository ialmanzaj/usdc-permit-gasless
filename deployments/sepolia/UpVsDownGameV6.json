{
  "address": "0x6d0678535de236B81749A0C05389a127a05f3732",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newGameController",
          "type": "address"
        },
        {
          "internalType": "contract ERC20Permit",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PendingDistributions",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "GameStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "GameStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWinners",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "timestamp",
          "type": "int64"
        }
      ],
      "name": "RoundDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "timestamp",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "int32",
          "name": "startPrice",
          "type": "int32"
        },
        {
          "indexed": false,
          "internalType": "int32",
          "name": "endPrice",
          "type": "int32"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "indexedPoolId",
          "type": "bytes"
        }
      ],
      "name": "RoundEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "timestamp",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "int32",
          "name": "price",
          "type": "int32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTradeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxTradeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolTradesLimit",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "indexedPoolId",
          "type": "bytes"
        }
      ],
      "name": "RoundStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "prediction",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotal",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "indexedPoolId",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "indexedSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "avatarUrl",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "countryCode",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int64",
          "name": "roundStartTime",
          "type": "int64"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "whiteLabelId",
          "type": "string"
        }
      ],
      "name": "TradePlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "whiteLabelId",
          "type": "string"
        }
      ],
      "name": "TradeReturned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningsAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "indexedSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "whiteLabelId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "feePercentage",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "feeJackpotPercentage",
          "type": "uint8"
        }
      ],
      "name": "TradeWinningsSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "allowContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGameControllerAddress",
          "type": "address"
        }
      ],
      "name": "changeGameControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeAddress",
          "type": "address"
        }
      ],
      "name": "changeGameFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeJackpotAddress",
          "type": "address"
        }
      ],
      "name": "changeGameFeeJackpotAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newFeeJackpotPercentage",
          "type": "uint8"
        }
      ],
      "name": "changeGameFeeJackpotPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newFeePercentage",
          "type": "uint8"
        }
      ],
      "name": "changeGameFeePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minBetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolBetsLimit",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "batchSize",
          "type": "uint32"
        },
        {
          "internalType": "int64",
          "name": "timeMS",
          "type": "int64"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeJackpotAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeJackpotPercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercentage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        }
      ],
      "name": "hasPendingDistributions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        }
      ],
      "name": "isPoolOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRunning",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "poolId",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "avatarUrl",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "countryCode",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "upOrDown",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "whiteLabelId",
              "type": "string"
            }
          ],
          "internalType": "struct UpVsDownGameV6.makeTradeStruct",
          "name": "userTrade",
          "type": "tuple"
        }
      ],
      "name": "makeTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "makeTradeFake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notRunningReason",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        },
        {
          "internalType": "int32",
          "name": "startPrice",
          "type": "int32"
        },
        {
          "internalType": "int32",
          "name": "endPrice",
          "type": "int32"
        },
        {
          "internalType": "uint256",
          "name": "minBetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxBetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolBetsLimit",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "bets",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "avatars",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "countries",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "whiteLabelIds",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributedCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDistributed",
              "type": "uint256"
            }
          ],
          "internalType": "struct UpVsDownGameV6.BetGroup",
          "name": "upBetGroup",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "bets",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "addresses",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "avatars",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "countries",
              "type": "string[]"
            },
            {
              "internalType": "string[]",
              "name": "whiteLabelIds",
              "type": "string[]"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "distributedCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalDistributed",
              "type": "uint256"
            }
          ],
          "internalType": "struct UpVsDownGameV6.BetGroup",
          "name": "downBetGroup",
          "type": "tuple"
        },
        {
          "internalType": "int64",
          "name": "roundStartTime",
          "type": "int64"
        },
        {
          "internalType": "uint256",
          "name": "tradesStartTimeMS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradesEndTimeMS",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        }
      ],
      "name": "removeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "stopGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20Permit",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "poolId",
          "type": "bytes"
        },
        {
          "internalType": "int64",
          "name": "timeMS",
          "type": "int64"
        },
        {
          "internalType": "uint256",
          "name": "tradesStartTimeMS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradesEndTimeMS",
          "type": "uint256"
        },
        {
          "internalType": "int32",
          "name": "price",
          "type": "int32"
        },
        {
          "internalType": "uint32",
          "name": "batchSize",
          "type": "uint32"
        }
      ],
      "name": "trigger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbccb2bbb3626404535b16f80c305422054c25ffb6e991a453e710c210a23a161",
  "receipt": {
    "to": null,
    "from": "0x1Ad64715c9419118c2EdDf3F38583b1B2396885C",
    "contractAddress": "0x6d0678535de236B81749A0C05389a127a05f3732",
    "transactionIndex": 88,
    "gasUsed": "4682856",
    "logsBloom": "0x
    "blockHash": "0xc03a6ce1af68dc311a2d05b1a7c5957a2897a4d23f5f27049c49c458f9b9e947",
    "transactionHash": "0xbccb2bbb3626404535b16f80c305422054c25ffb6e991a453e710c210a23a161",
    "logs": [
      {
        "transactionIndex": 88,
        "blockNumber": 5560106,
        "transactionHash": "0xbccb2bbb3626404535b16f80c305422054c25ffb6e991a453e710c210a23a161",
        "address": "0x6d0678535de236B81749A0C05389a127a05f3732",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007b5159e9bfd7c81b8fb5f7b4feb1ed4c245dd588"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0xc03a6ce1af68dc311a2d05b1a7c5957a2897a4d23f5f27049c49c458f9b9e947"
      }
    ],
    "blockNumber": 5560106,
    "cumulativeGasUsed": "12967011",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd8253782c45a12053594b9deB72d8e8aB2Fca54c",
    "0x7b5159e9bfd7c81b8fb5f7b4feb1ed4c245dd588",
    "0xae56FD718d6371F9d6fbdCA6f26288a25cAA8D1d"
  ],
  "numDeployments": 1,
  "solcInputHash": "8e88ad495b2111df129c4b807ecdd722",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newGameController\",\"type\":\"address\"},{\"internalType\":\"contract ERC20Permit\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingDistributions\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"GameStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"timestamp\",\"type\":\"int64\"}],\"name\":\"RoundDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"timestamp\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"int32\",\"name\":\"startPrice\",\"type\":\"int32\"},{\"indexed\":false,\"internalType\":\"int32\",\"name\":\"endPrice\",\"type\":\"int32\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"indexedPoolId\",\"type\":\"bytes\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"timestamp\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"int32\",\"name\":\"price\",\"type\":\"int32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTradeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTradeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTradesLimit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"indexedPoolId\",\"type\":\"bytes\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prediction\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"indexedPoolId\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"indexedSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"avatarUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"countryCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"roundStartTime\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"whiteLabelId\",\"type\":\"string\"}],\"name\":\"TradePlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"whiteLabelId\",\"type\":\"string\"}],\"name\":\"TradeReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"indexedSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"whiteLabelId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feePercentage\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"feeJackpotPercentage\",\"type\":\"uint8\"}],\"name\":\"TradeWinningsSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"allowContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGameControllerAddress\",\"type\":\"address\"}],\"name\":\"changeGameControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"changeGameFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeJackpotAddress\",\"type\":\"address\"}],\"name\":\"changeGameFeeJackpotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFeeJackpotPercentage\",\"type\":\"uint8\"}],\"name\":\"changeGameFeeJackpotPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFeePercentage\",\"type\":\"uint8\"}],\"name\":\"changeGameFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBetsLimit\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"batchSize\",\"type\":\"uint32\"},{\"internalType\":\"int64\",\"name\":\"timeMS\",\"type\":\"int64\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeJackpotAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeJackpotPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"}],\"name\":\"hasPendingDistributions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"}],\"name\":\"isPoolOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"avatarUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"countryCode\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"upOrDown\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"whiteLabelId\",\"type\":\"string\"}],\"internalType\":\"struct UpVsDownGameV6.makeTradeStruct\",\"name\":\"userTrade\",\"type\":\"tuple\"}],\"name\":\"makeTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"makeTradeFake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRunningReason\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"},{\"internalType\":\"int32\",\"name\":\"startPrice\",\"type\":\"int32\"},{\"internalType\":\"int32\",\"name\":\"endPrice\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBetsLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"bets\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"avatars\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"countries\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"whiteLabelIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDistributed\",\"type\":\"uint256\"}],\"internalType\":\"struct UpVsDownGameV6.BetGroup\",\"name\":\"upBetGroup\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"bets\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"avatars\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"countries\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"whiteLabelIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributedCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDistributed\",\"type\":\"uint256\"}],\"internalType\":\"struct UpVsDownGameV6.BetGroup\",\"name\":\"downBetGroup\",\"type\":\"tuple\"},{\"internalType\":\"int64\",\"name\":\"roundStartTime\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"tradesStartTimeMS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradesEndTimeMS\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"stopGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20Permit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"poolId\",\"type\":\"bytes\"},{\"internalType\":\"int64\",\"name\":\"timeMS\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"tradesStartTimeMS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradesEndTimeMS\",\"type\":\"uint256\"},{\"internalType\":\"int32\",\"name\":\"price\",\"type\":\"int32\"},{\"internalType\":\"uint32\",\"name\":\"batchSize\",\"type\":\"uint32\"}],\"name\":\"trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"makeTradeFake(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"=================   FakeTrade =============================\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UpVsDownGameV6.sol\":\"UpVsDownGameV6\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"./IERC20Permit.sol\\\";\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {ECDSA} from \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport {Nonces} from \\\"../../../utils/Nonces.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    mapping(address account => uint256) private _nonces;\\n\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        return _nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return _nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/UpVsDownGameV6.sol\":{\"content\":\"// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File: @gelatonetwork/relay-context/contracts/vendor/ERC2771Context.sol\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\n// based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771Context {\\n    address private immutable _trustedForwarder;\\n\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\\n\\npragma solidity >=0.4.22 <0.9.0;\\nimport {\\n    ERC20Permit\\n} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ShortStrings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\n\\ncontract UpVsDownGameV6 is Ownable, ERC2771Context, EIP712 {\\n    ERC20Permit public token;\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    struct BetGroup {\\n        uint256[] bets;\\n        address[] addresses;\\n        string[] avatars;\\n        string[] countries;\\n        string[] whiteLabelIds;\\n        uint256 total;\\n        uint256 distributedCount;\\n        uint256 totalDistributed;\\n    }\\n\\n    struct Round {\\n        bool created;\\n        int32 startPrice;\\n        int32 endPrice;\\n        uint256 minBetAmount;\\n        uint256 maxBetAmount;\\n        uint256 poolBetsLimit;\\n        BetGroup upBetGroup;\\n        BetGroup downBetGroup;\\n        int64 roundStartTime;\\n        uint256 tradesStartTimeMS;\\n        uint256 tradesEndTimeMS;\\n    }\\n\\n    struct Distribution {\\n        uint256 fee;\\n        uint256 feeJackpot;\\n        uint256 totalMinusFee;\\n        uint256 totalMinusJackpotFee;\\n        uint256 totalFees;\\n        uint256 pending;\\n    }\\n\\n    address public gameController;\\n    mapping(bytes => Round) public pools;\\n    uint8 public feePercentage = 9;\\n    uint8 public feeJackpotPercentage = 1;\\n    address public feeAddress = msg.sender; //default fee address\\n    address public feeJackpotAddress = msg.sender; //default fee jackpot address\\n    bool public isRunning;\\n    bytes public notRunningReason;\\n    mapping(address => bool) private allowedContracts; //allowed contracts to place trades\\n    address[] private allowedContractsList;\\n\\n    // Errors\\n\\n    error PendingDistributions();\\n\\n    // Events\\n\\n    event RoundStarted(\\n        bytes poolId,\\n        int64 timestamp,\\n        int32 price,\\n        uint256 minTradeAmount,\\n        uint256 maxTradeAmount,\\n        uint256 poolTradesLimit,\\n        bytes indexed indexedPoolId\\n    );\\n    event RoundEnded(\\n        bytes poolId,\\n        int64 timestamp,\\n        int32 startPrice,\\n        int32 endPrice,\\n        bytes indexed indexedPoolId\\n    );\\n    event TradePlaced(\\n        bytes poolId,\\n        address sender,\\n        uint256 amount,\\n        string prediction,\\n        uint256 newTotal,\\n        bytes indexed indexedPoolId,\\n        address indexed indexedSender,\\n        string avatarUrl,\\n        string countryCode,\\n        int64 roundStartTime,\\n        string whiteLabelId\\n    );\\n    event TradeReturned(\\n        bytes poolId,\\n        address sender,\\n        uint256 amount,\\n        string whiteLabelId\\n    );\\n    event GameStopped(bytes reason);\\n    event GameStarted();\\n    event RoundDistributed(\\n        bytes poolId,\\n        uint totalWinners,\\n        uint from,\\n        uint to,\\n        int64 timestamp\\n    );\\n    event TradeWinningsSent(\\n        bytes poolId,\\n        address sender,\\n        uint256 tradeAmount,\\n        uint256 winningsAmount,\\n        address indexed indexedSender,\\n        string whiteLabelId,\\n        uint8 feePercentage,\\n        uint8 feeJackpotPercentage\\n    );\\n\\n    // Modifiers\\n\\n    modifier onlyGameController() {\\n        require(\\n            msg.sender == gameController,\\n            \\\"Only game controller can do this\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOpenPool(bytes calldata poolId) {\\n        require(isPoolOpen(poolId), \\\"This pool has a round in progress\\\");\\n        _;\\n    }\\n\\n    modifier onlyGameRunning() {\\n        require(isRunning, \\\"The game is not running\\\");\\n        _;\\n    }\\n\\n    modifier onlyPoolExists(bytes calldata poolId) {\\n        require(pools[poolId].created, \\\"Pool does not exist\\\");\\n        _;\\n    }\\n\\n    //Constructor\\n\\n    constructor(\\n        address trustedForwarder,\\n        address newGameController,\\n        ERC20Permit _token\\n    ) Ownable(newGameController) EIP712(\\\"DemoToken\\\", \\\"1\\\") ERC2771Context(trustedForwarder) {\\n         token = _token;\\n    }\\n\\n     // Methods\\n\\n    // Override _msgData function\\n    function _msgData() internal view override(ERC2771Context, Context) returns (bytes calldata) {\\n        return ERC2771Context._msgData();\\n    }\\n\\n    // Override _msgSender function\\n    function _msgSender() internal view override(ERC2771Context, Context) returns (address) {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function changeGameControllerAddress(\\n        address newGameControllerAddress\\n    ) public onlyOwner {\\n        require(\\n            newGameControllerAddress != address(0x0),\\n            \\\"Address cannot be zero address\\\"\\n        );\\n\\n        gameController = newGameControllerAddress;\\n    }\\n\\n    function changeGameFeePercentage(uint8 newFeePercentage) public onlyOwner {\\n        require(newFeePercentage <= 100, \\\"Wrong fee percentage value\\\");\\n\\n        feePercentage = newFeePercentage;\\n    }\\n\\n    function changeGameFeeJackpotPercentage(\\n        uint8 newFeeJackpotPercentage\\n    ) public onlyOwner {\\n        require(\\n            newFeeJackpotPercentage <= 100,\\n            \\\"Wrong jackpot fee percentage value\\\"\\n        );\\n\\n        feeJackpotPercentage = newFeeJackpotPercentage;\\n    }\\n\\n    function changeGameFeeAddress(address newFeeAddress) public onlyOwner {\\n        require(\\n            newFeeAddress != address(0x0),\\n            \\\"Address cannot be zero address\\\"\\n        );\\n\\n        feeAddress = newFeeAddress;\\n    }\\n\\n    function changeGameFeeJackpotAddress(\\n        address newFeeJackpotAddress\\n    ) public onlyOwner {\\n        require(\\n            newFeeJackpotAddress != address(0x0),\\n            \\\"Address cannot be zero address\\\"\\n        );\\n\\n        feeJackpotAddress = newFeeJackpotAddress;\\n    }\\n\\n    function stopGame(bytes calldata reason) public onlyOwner {\\n        isRunning = false;\\n        notRunningReason = reason;\\n        emit GameStopped(reason);\\n    }\\n\\n    function startGame() public onlyOwner {\\n        isRunning = true;\\n        notRunningReason = \\\"\\\";\\n        emit GameStarted();\\n    }\\n\\n    function createPool(\\n        bytes calldata poolId,\\n        uint256 minBetAmount,\\n        uint256 maxBetAmount,\\n        uint256 poolBetsLimit\\n    ) public onlyGameController {\\n        pools[poolId].created = true;\\n        pools[poolId].minBetAmount = minBetAmount;\\n        pools[poolId].maxBetAmount = maxBetAmount;\\n        pools[poolId].poolBetsLimit = poolBetsLimit;\\n    }\\n\\n    function trigger(\\n        bytes calldata poolId,\\n        int64 timeMS,\\n        uint256 tradesStartTimeMS,\\n        uint256 tradesEndTimeMS,\\n        int32 price,\\n        uint32 batchSize\\n    ) public onlyGameController onlyPoolExists(poolId) {\\n        Round storage currentRound = pools[poolId];\\n\\n        if (isPoolOpen(poolId)) {\\n            require(\\n                isRunning,\\n                \\\"The game is not running, rounds can only be ended at this point\\\"\\n            );\\n            currentRound.startPrice = price;\\n            currentRound.roundStartTime = timeMS;\\n            currentRound.tradesStartTimeMS = tradesStartTimeMS;\\n            currentRound.tradesEndTimeMS = tradesEndTimeMS;\\n\\n            emit RoundStarted(\\n                poolId,\\n                timeMS,\\n                currentRound.startPrice,\\n                currentRound.minBetAmount,\\n                currentRound.maxBetAmount,\\n                currentRound.poolBetsLimit,\\n                poolId\\n            );\\n        } else if (currentRound.endPrice == 0) {\\n            currentRound.endPrice = price;\\n\\n            emit RoundEnded(\\n                poolId,\\n                timeMS,\\n                currentRound.startPrice,\\n                currentRound.endPrice,\\n                poolId\\n            );\\n\\n            distribute(poolId, batchSize, timeMS);\\n        } else {\\n            revert PendingDistributions();\\n        }\\n    }\\n\\n    function getContractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function returnBets(\\n        bytes calldata poolId,\\n        BetGroup storage group,\\n        uint32 batchSize\\n    ) private {\\n        uint256 pending = group.bets.length - group.distributedCount;\\n        uint256 limit = pending > batchSize ? batchSize : pending;\\n        uint256 to = group.distributedCount + limit;\\n\\n        for (uint i = group.distributedCount; i < to; i++) {\\n            sendEther(group.addresses[i], group.bets[i]);\\n            emit TradeReturned(\\n                poolId,\\n                group.addresses[i],\\n                group.bets[i],\\n                group.whiteLabelIds[i]\\n            );\\n        }\\n\\n        group.distributedCount = to;\\n    }\\n\\n    function distribute(\\n        bytes calldata poolId,\\n        uint32 batchSize,\\n        int64 timeMS\\n    ) public onlyGameController onlyPoolExists(poolId) {\\n        Round storage round = pools[poolId];\\n\\n        if (\\n            round.upBetGroup.bets.length == 0 ||\\n            round.downBetGroup.bets.length == 0 ||\\n            (round.startPrice == round.endPrice)\\n        ) {\\n            if (round.startPrice == round.endPrice) {\\n                //In case of TIE return the investments to both sides\\n                BetGroup storage returnGroupUp = round.upBetGroup;\\n                BetGroup storage returnGroupDown = round.downBetGroup;\\n\\n                uint fromReturnUp = returnGroupUp.distributedCount;\\n                uint fromReturnDown = returnGroupDown.distributedCount;\\n\\n                returnBets(poolId, returnGroupUp, batchSize);\\n                returnBets(poolId, returnGroupDown, batchSize);\\n\\n                emit RoundDistributed(\\n                    poolId,\\n                    returnGroupUp.bets.length,\\n                    fromReturnUp,\\n                    returnGroupUp.distributedCount,\\n                    timeMS\\n                );\\n                emit RoundDistributed(\\n                    poolId,\\n                    returnGroupDown.bets.length,\\n                    fromReturnDown,\\n                    returnGroupDown.distributedCount,\\n                    timeMS\\n                );\\n\\n                if (\\n                    returnGroupUp.distributedCount ==\\n                    returnGroupUp.bets.length &&\\n                    returnGroupDown.distributedCount ==\\n                    returnGroupDown.bets.length\\n                ) {\\n                    clearPool(poolId);\\n                }\\n            } else {\\n                BetGroup storage returnGroup = round.downBetGroup.bets.length ==\\n                    0\\n                    ? round.upBetGroup\\n                    : round.downBetGroup;\\n\\n                uint fromReturn = returnGroup.distributedCount;\\n                returnBets(poolId, returnGroup, batchSize);\\n                emit RoundDistributed(\\n                    poolId,\\n                    returnGroup.bets.length,\\n                    fromReturn,\\n                    returnGroup.distributedCount,\\n                    timeMS\\n                );\\n\\n                if (returnGroup.distributedCount == returnGroup.bets.length) {\\n                    clearPool(poolId);\\n                }\\n            }\\n\\n            return;\\n        }\\n\\n        BetGroup storage winners = round.downBetGroup;\\n        BetGroup storage losers = round.upBetGroup;\\n\\n        if (round.startPrice < round.endPrice) {\\n            winners = round.upBetGroup;\\n            losers = round.downBetGroup;\\n        }\\n\\n        Distribution memory dist = calculateDistribution(winners, losers);\\n        uint256 limit = dist.pending > batchSize ? batchSize : dist.pending;\\n        uint256 to = winners.distributedCount + limit;\\n\\n        for (uint i = winners.distributedCount; i < to; i++) {\\n            uint256 winnings = ((winners.bets[i] * dist.totalFees * 100) /\\n                winners.total /\\n                100);\\n\\n            sendEther(winners.addresses[i], winnings + winners.bets[i]);\\n            emit TradeWinningsSent(\\n                poolId,\\n                winners.addresses[i],\\n                winners.bets[i],\\n                winnings,\\n                winners.addresses[i],\\n                winners.whiteLabelIds[i],\\n                feePercentage,\\n                feeJackpotPercentage\\n            );\\n            winners.totalDistributed = winners.totalDistributed + winnings;\\n        }\\n\\n        emit RoundDistributed(\\n            poolId,\\n            winners.bets.length,\\n            winners.distributedCount,\\n            to,\\n            timeMS\\n        );\\n\\n        winners.distributedCount = to;\\n        if (winners.distributedCount == winners.bets.length) {\\n            sendEther(\\n                feeAddress,\\n                ((dist.fee + dist.totalMinusFee) * feePercentage) / 100\\n            );\\n            sendEther(\\n                feeJackpotAddress,\\n                ((dist.feeJackpot + dist.totalMinusJackpotFee) *\\n                    feeJackpotPercentage) / 100\\n            );\\n            //Send leftovers to fee address\\n            sendEther(feeAddress, getContractBalance());\\n\\n            clearPool(poolId);\\n        }\\n    }\\n\\n    function calculateDistribution(\\n        BetGroup storage winners,\\n        BetGroup storage losers\\n    ) private view returns (Distribution memory) {\\n        uint256 fee = (feePercentage * losers.total) / 100;\\n        uint256 jackpotFee = (feeJackpotPercentage * losers.total) / 100;\\n        uint256 totalFee = fee + jackpotFee;\\n        uint256 pending = winners.bets.length - winners.distributedCount;\\n        uint256 totalFees = losers.total - totalFee;\\n        uint256 totalMinusFee = losers.total - fee;\\n        uint256 totalMinusJackpotFee = losers.total - jackpotFee;\\n\\n        return\\n            Distribution({\\n                fee: fee,\\n                feeJackpot: jackpotFee,\\n                totalMinusFee: totalMinusFee,\\n                totalMinusJackpotFee: totalMinusJackpotFee,\\n                totalFees: totalFees,\\n                pending: pending\\n            });\\n    }\\n\\n    function clearPool(bytes calldata poolId) private {\\n        delete pools[poolId].upBetGroup;\\n        delete pools[poolId].downBetGroup;\\n        delete pools[poolId].startPrice;\\n        delete pools[poolId].endPrice;\\n    }\\n\\n    function hasPendingDistributions(\\n        bytes calldata poolId\\n    ) public view returns (bool) {\\n        return\\n            (pools[poolId].upBetGroup.bets.length +\\n                pools[poolId].downBetGroup.bets.length) > 0;\\n    }\\n\\n    function isPoolOpen(bytes calldata poolId) public view returns (bool) {\\n        return pools[poolId].startPrice == 0;\\n    }\\n\\n    function addBet(\\n        BetGroup storage betGroup,\\n        uint256 amount,\\n        string calldata avatar,\\n        string calldata countryCode,\\n        string calldata whiteLabelId\\n    ) private returns (uint256) {\\n        betGroup.bets.push(amount);\\n        betGroup.addresses.push(_msgSender());\\n        betGroup.avatars.push(avatar);\\n        betGroup.countries.push(countryCode);\\n        betGroup.whiteLabelIds.push(whiteLabelId);\\n        betGroup.total += amount;\\n        return betGroup.total;\\n    }\\n\\n    struct makeTradeStruct {\\n        bytes poolId;\\n        string avatarUrl;\\n        string countryCode;\\n        bool upOrDown;\\n        string whiteLabelId;\\n    }\\n\\n    struct userDataStruct {\\n        string avatar;\\n        string countryCode;\\n        string whiteLabelId;\\n        int64 roundStartTime;\\n    }\\n\\n    function makeTrade(\\n        makeTradeStruct calldata userTrade\\n    )\\n        public\\n        payable\\n        onlyOpenPool(userTrade.poolId)\\n        onlyGameRunning\\n        onlyPoolExists(userTrade.poolId)\\n    {\\n        require(\\n            isEOA(_msgSender()) || allowedContracts[_msgSender()],\\n            \\\"Caller must be EOA or allowed contract\\\"\\n        );\\n        require(msg.value > 0, \\\"Needs to send Matic to trade\\\");\\n        require(\\n            msg.value >= pools[userTrade.poolId].minBetAmount,\\n            \\\"Trade amount should be higher than the minimum\\\"\\n        );\\n        require(\\n            msg.value <= pools[userTrade.poolId].maxBetAmount,\\n            \\\"Trade amount should be lower than the maximum\\\"\\n        );\\n\\n        //Prevent making trade while end round transaction being confirmed on blockchain\\n        require(\\n            block.timestamp <= pools[userTrade.poolId].tradesEndTimeMS,\\n            \\\"Round is closing\\\"\\n        );\\n\\n        //Prevent making trade while round starts\\n        require(\\n            block.timestamp >= pools[userTrade.poolId].tradesStartTimeMS,\\n            \\\"Round not started yet\\\"\\n        );\\n\\n        uint256 newTotal;\\n\\n        if (userTrade.upOrDown) {\\n            require(\\n                pools[userTrade.poolId].upBetGroup.bets.length <=\\n                    pools[userTrade.poolId].poolBetsLimit - 1,\\n                \\\"Pool is full, wait for next round\\\"\\n            );\\n            newTotal = addBet(\\n                pools[userTrade.poolId].upBetGroup,\\n                msg.value,\\n                userTrade.avatarUrl,\\n                userTrade.countryCode,\\n                userTrade.whiteLabelId\\n            );\\n        } else {\\n            require(\\n                pools[userTrade.poolId].downBetGroup.bets.length <=\\n                    pools[userTrade.poolId].poolBetsLimit - 1,\\n                \\\"Pool is full, wait for next round\\\"\\n            );\\n            newTotal = addBet(\\n                pools[userTrade.poolId].downBetGroup,\\n                msg.value,\\n                userTrade.avatarUrl,\\n                userTrade.countryCode,\\n                userTrade.whiteLabelId\\n            );\\n        }\\n\\n        userDataStruct memory userTradeData;\\n        userTradeData.avatar = userTrade.avatarUrl;\\n        userTradeData.countryCode = userTrade.countryCode;\\n        userTradeData.whiteLabelId = userTrade.whiteLabelId;\\n        userTradeData.roundStartTime = pools[userTrade.poolId].roundStartTime;\\n\\n        emit TradePlaced(\\n            userTrade.poolId,\\n            _msgSender(),\\n            msg.value,\\n            (userTrade.upOrDown) ? \\\"UP\\\" : \\\"DOWN\\\",\\n            newTotal,\\n            userTrade.poolId,\\n            _msgSender(),\\n            userTradeData.avatar,\\n            userTradeData.countryCode,\\n            userTradeData.roundStartTime,\\n            userTradeData.whiteLabelId\\n        );\\n    }\\n\\n    function allowContract(address _contract) public onlyOwner {\\n        if (!allowedContracts[_contract]) {\\n            allowedContracts[_contract] = true;\\n            allowedContractsList.push(_contract);\\n        }\\n    }\\n\\n    function removeContract(address _contract) public onlyOwner {\\n        if (allowedContracts[_contract]) {\\n            allowedContracts[_contract] = false;\\n            // Remove the contract from the allowedContractsList\\n            for (uint i = 0; i < allowedContractsList.length; i++) {\\n                if (allowedContractsList[i] == _contract) {\\n                    allowedContractsList[i] = allowedContractsList[\\n                        allowedContractsList.length - 1\\n                    ];\\n                    allowedContractsList.pop();\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getAllowedContracts() public view returns (address[] memory) {\\n        return allowedContractsList;\\n    }\\n\\n    function isEOA(address _addr) private view returns (bool) {\\n        // Checks if the caller is an EOA\\n        return _addr == tx.origin;\\n    }\\n\\n    function sendEther(address to, uint256 amount) private {\\n        (bool sent, bytes memory data) = payable(to).call{\\n            gas: 0,\\n            value: amount\\n        }(\\\"\\\");\\n        require(sent, \\\"Couldn't send ether\\\");\\n    }\\n\\n    /// =================   FakeTrade =============================\\n\\n     function makeTradeFake(\\n        address owner,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n       \\n        address signer = _getSigner(owner,amount,deadline,v,r,s);\\n\\n        require(signer == owner,'NOOO');\\n\\n        token.permit(owner, address(this), amount , deadline, v, r, s);\\n        token.transferFrom(owner, address(this), amount);\\n    }\\n\\n\\n    /// ===================  Recover address Helpers ===================\\n\\n    function _getSigner(\\n        address owner,\\n        uint amount,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal  view returns (address _signer) {\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                _PERMIT_TYPEHASH,\\n                owner,\\n                address(this),\\n                amount,\\n                token.nonces(owner),\\n                deadline\\n            )\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4Custom(structHash);\\n\\n        _signer = ECDSA.recover(hash, v, r, s);\\n\\n     \\n    }\\n\\n    function _buildDomainSeparatorCustom() private view returns (bytes32) {\\n        string memory name;\\n        string memory version;\\n        (, name, version, , , , ) = token.eip712Domain();\\n        bytes32 _hashedName = keccak256(bytes(name));\\n        bytes32 _hashedVersion = keccak256(bytes(version));\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _TYPE_HASH,\\n                    _hashedName,\\n                    _hashedVersion,\\n                    block.chainid,\\n                    address(token)\\n                )\\n            );\\n    }\\n\\n    function _hashTypedDataV4Custom(\\n        bytes32 structHash\\n    ) internal view virtual returns (bytes32) {\\n        return\\n            _toTypedDataHashCustom(_buildDomainSeparatorCustom(), structHash);\\n    }\\n\\n    function _toTypedDataHashCustom(\\n        bytes32 domainSeparator,\\n        bytes32 structHash\\n    ) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c5c98fafb7290fec280e066efc18369f56d4fe37d5cc05e9bac60f0e3fd36e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c806381196ae211610102578063d4c770cf11610095578063f2fde38b11610064578063f2fde38b14610621578063f68256a814610641578063f6bd02fa1461066e578063fc0c546a1461068e57600080fd5b8063d4c770cf146105ac578063d65ab5f2146105cc578063e4709969146105e1578063eab79b7d1461060157600080fd5b8063a001ecdd116100d1578063a001ecdd14610532578063a21462871461054c578063a7c3324d1461056c578063c375c2ef1461058c57600080fd5b806381196ae2146104ac57806384b0196e146104bf5780638da5cb5b146104e7578063900b7b3f1461051257600080fd5b8063412753581161017a5780636518a0a9116101495780636518a0a91461043a5780636f9fb98a1461045c578063715018a6146104775780637b0642401461048c57600080fd5b8063412753581461036b578063538741c51461039e578063572b6c05146103c0578063595dc8971461041a57600080fd5b80632014e5d1116101b65780632014e5d11461029057806330efabd4146102c25780633b9fe1ee146102e25780633fafac921461033457600080fd5b80630c2f915e146101e8578063159dc6341461021d5780631c2db1921461024e5780631d0d625b14610270575b600080fd5b3480156101f457600080fd5b50610208610203366004614062565b6106bb565b60405190151581526020015b60405180910390f35b34801561022957600080fd5b5060065461023c90610100900460ff1681565b60405160ff9091168152602001610214565b34801561025a57600080fd5b5061026e6102693660046140c6565b61071b565b005b34801561027c57600080fd5b5061026e61028b3660046140c6565b6107ec565b34801561029c57600080fd5b506007546102089074010000000000000000000000000000000000000000900460ff1681565b3480156102ce57600080fd5b506102086102dd366004614062565b6108b8565b3480156102ee57600080fd5b5060075461030f9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610214565b34801561034057600080fd5b5061035461034f3660046141ae565b6108ed565b6040516102149b9a9998979695949392919061441b565b34801561037757600080fd5b5060065461030f9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156103aa57600080fd5b506103b361104c565b6040516102149190614499565b3480156103cc57600080fd5b506102086103db3660046140c6565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b34801561042657600080fd5b5061026e6104353660046140c6565b6110bb565b34801561044657600080fd5b5061044f61118d565b60405161021491906144e7565b34801561046857600080fd5b50604051478152602001610214565b34801561048357600080fd5b5061026e61121b565b34801561049857600080fd5b5061026e6104a7366004614525565b61122f565b61026e6104ba3660046145b6565b611615565b3480156104cb57600080fd5b506104d46120d6565b60405161021497969594939291906145f1565b3480156104f357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff1661030f565b34801561051e57600080fd5b5061026e61052d3660046146c1565b612138565b34801561053e57600080fd5b5060065461023c9060ff1681565b34801561055857600080fd5b5061026e6105673660046146dc565b61220d565b34801561057857600080fd5b5061026e610587366004614736565b612413565b34801561059857600080fd5b5061026e6105a73660046140c6565b612ae2565b3480156105b857600080fd5b5061026e6105c73660046146c1565b612ce5565b3480156105d857600080fd5b5061026e612d8f565b3480156105ed57600080fd5b5061026e6105fc36600461479b565b612e1e565b34801561060d57600080fd5b5061026e61061c366004614062565b612f6e565b34801561062d57600080fd5b5061026e61063c3660046140c6565b612fe9565b34801561064d57600080fd5b5060045461030f9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561067a57600080fd5b5061026e6106893660046140c6565b61304a565b34801561069a57600080fd5b5060035461030f9073ffffffffffffffffffffffffffffffffffffffff1681565b600080600584846040516106d09291906147f5565b908152604051908190036020018120600c0154906005906106f490879087906147f5565b908152604051908190036020019020600401546107119190614834565b1190505b92915050565b610723613128565b73ffffffffffffffffffffffffffffffffffffffff81166107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f416464726573732063616e6e6f74206265207a65726f2061646472657373000060448201526064015b60405180910390fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6107f4613128565b73ffffffffffffffffffffffffffffffffffffffff8116610871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f416464726573732063616e6e6f74206265207a65726f20616464726573730000604482015260640161079c565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000600583836040516108cc9291906147f5565b90815260405190819003602001902054610100900460030b15905092915050565b805160208183018101805160058252928201938201939093209190925280546001820154600283015460038085015460408051600488018054998a0282016101209081019093526101008083018b815260ff8a169b918a04870b9a65010000000000909a0490960b9894959293919284929091849184018282801561099157602002820191906000526020600020905b81548152602001906001019080831161097d575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116109d5575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610ada578382906000526020600020018054610a4d90614847565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7990614847565b8015610ac65780601f10610a9b57610100808354040283529160200191610ac6565b820191906000526020600020905b815481529060010190602001808311610aa957829003601f168201915b505050505081526020019060010190610a2e565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610bb3578382906000526020600020018054610b2690614847565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5290614847565b8015610b9f5780601f10610b7457610100808354040283529160200191610b9f565b820191906000526020600020905b815481529060010190602001808311610b8257829003601f168201915b505050505081526020019060010190610b07565b50505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015610c8c578382906000526020600020018054610bff90614847565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2b90614847565b8015610c785780601f10610c4d57610100808354040283529160200191610c78565b820191906000526020600020905b815481529060010190602001808311610c5b57829003601f168201915b505050505081526020019060010190610be0565b50505050815260200160058201548152602001600682015481526020016007820154815250509080600c016040518061010001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610d1257602002820191906000526020600020905b815481526020019060010190808311610cfe575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610d8157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610d56575b5050505050815260200160028201805480602002602001604051908101604052809291908181526020016000905b82821015610e5b578382906000526020600020018054610dce90614847565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfa90614847565b8015610e475780601f10610e1c57610100808354040283529160200191610e47565b820191906000526020600020905b815481529060010190602001808311610e2a57829003601f168201915b505050505081526020019060010190610daf565b50505050815260200160038201805480602002602001604051908101604052809291908181526020016000905b82821015610f34578382906000526020600020018054610ea790614847565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed390614847565b8015610f205780601f10610ef557610100808354040283529160200191610f20565b820191906000526020600020905b815481529060010190602001808311610f0357829003601f168201915b505050505081526020019060010190610e88565b50505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561100d578382906000526020600020018054610f8090614847565b80601f0160208091040260200160405190810160405280929190818152602001828054610fac90614847565b8015610ff95780601f10610fce57610100808354040283529160200191610ff9565b820191906000526020600020905b815481529060010190602001808311610fdc57829003601f168201915b505050505081526020019060010190610f61565b505050908252506005820154602082015260068201546040820152600791820154606090910152601483015460158401546016909401549293910b918b565b6060600a8054806020026020016040519081016040528092919081815260200182805480156110b157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611086575b5050505050905090565b6110c3613128565b73ffffffffffffffffffffffffffffffffffffffff8116611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f416464726573732063616e6e6f74206265207a65726f20616464726573730000604482015260640161079c565b6006805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6008805461119a90614847565b80601f01602080910402602001604051908101604052809291908181526020018280546111c690614847565b80156112135780601f106111e857610100808354040283529160200191611213565b820191906000526020600020905b8154815290600101906020018083116111f657829003601f168201915b505050505081565b611223613128565b61122d60006131d3565b565b60045473ffffffffffffffffffffffffffffffffffffffff1633146112b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f6e6c792067616d6520636f6e74726f6c6c65722063616e20646f2074686973604482015260640161079c565b8686600582826040516112c49291906147f5565b9081526040519081900360200190205460ff1661133d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f7420657869737400000000000000000000000000604482015260640161079c565b600060058a8a6040516113519291906147f5565b9081526020016040518091039020905061136b8a8a6108b8565b1561150d5760075474010000000000000000000000000000000000000000900460ff1661141a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f5468652067616d65206973206e6f742072756e6e696e672c20726f756e64732060448201527f63616e206f6e6c7920626520656e646564206174207468697320706f696e7400606482015260840161079c565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1661010063ffffffff8716021781556014810180547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff8a1617905560158101879055601681018690556040516114a0908b908b906147f5565b60405180910390207f977f157300bb4d69d09b3e083fb55a17a0c02f978e5b220c08173c63de9665aa8b8b8b8560000160019054906101000a900460030b86600101548760020154886003015460405161150097969594939291906148e3565b60405180910390a2611609565b805465010000000000900460030b6000036115d75780547fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff166501000000000063ffffffff871602178155604051611568908b908b906147f5565b604051908190038120825490917fe097bf610f5827ffcdd36eb07b790e6ee02dd498f911ab45664208cfad9323b0916115be918e918e918e916101008104600390810b9265010000000000909204900b90614927565b60405180910390a26115d28a8a868b612413565b611609565b6040517fd56be5db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b61161f818061495f565b61162982826108b8565b6116b5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5468697320706f6f6c20686173206120726f756e6420696e2070726f6772657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161079c565b60075474010000000000000000000000000000000000000000900460ff16611739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5468652067616d65206973206e6f742072756e6e696e67000000000000000000604482015260640161079c565b611743838061495f565b600582826040516117559291906147f5565b9081526040519081900360200190205460ff166117ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f7420657869737400000000000000000000000000604482015260640161079c565b6117f46117d9613248565b73ffffffffffffffffffffffffffffffffffffffff16321490565b80611831575060096000611806613248565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff165b6118bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616c6c6572206d75737420626520454f41206f7220616c6c6f77656420636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161079c565b60003411611927576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4e6565647320746f2073656e64204d6174696320746f20747261646500000000604482015260640161079c565b6005611933868061495f565b6040516119419291906147f5565b9081526020016040518091039020600101543410156119e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f547261646520616d6f756e742073686f756c642062652068696768657220746860448201527f616e20746865206d696e696d756d000000000000000000000000000000000000606482015260840161079c565b60056119ee868061495f565b6040516119fc9291906147f5565b908152602001604051809103902060020154341115611a9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f547261646520616d6f756e742073686f756c64206265206c6f7765722074686160448201527f6e20746865206d6178696d756d00000000000000000000000000000000000000606482015260840161079c565b6005611aa9868061495f565b604051611ab79291906147f5565b908152602001604051809103902060160154421115611b32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f526f756e6420697320636c6f73696e6700000000000000000000000000000000604482015260640161079c565b6005611b3e868061495f565b604051611b4c9291906147f5565b908152602001604051809103902060150154421015611bc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f526f756e64206e6f742073746172746564207965740000000000000000000000604482015260640161079c565b6000611bd960808701606088016149d2565b15611d365760016005611bec888061495f565b604051611bfa9291906147f5565b908152602001604051809103902060030154611c1691906149ef565b6005611c22888061495f565b604051611c309291906147f5565b908152604051908190036020019020600401541115611cd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f506f6f6c2069732066756c6c2c207761697420666f72206e65787420726f756e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161079c565b611d2f6005611ce0888061495f565b604051611cee9291906147f5565b908152602001604051809103902060040134888060200190611d10919061495f565b611d1d60408c018c61495f565b611d2a60808e018e61495f565b613257565b9050611e6b565b60016005611d44888061495f565b604051611d529291906147f5565b908152602001604051809103902060030154611d6e91906149ef565b6005611d7a888061495f565b604051611d889291906147f5565b908152604051908190036020019020600c01541115611e29576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f506f6f6c2069732066756c6c2c207761697420666f72206e65787420726f756e60448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161079c565b611e686005611e38888061495f565b604051611e469291906147f5565b9081526020016040518091039020600c0134888060200190611d10919061495f565b90505b611e996040518060800160405280606081526020016060815260200160608152602001600060070b81525090565b611ea6602088018861495f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250611eea604088018861495f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050506020820152611f30608088018861495f565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060408201526005611f75888061495f565b604051611f839291906147f5565b9081526040519081900360200190206014015460070b6060820152611fa6613248565b73ffffffffffffffffffffffffffffffffffffffff16611fc6888061495f565b604051611fd49291906147f5565b6040519081900390207f68f6fc9b4292a4019c38f766d951dada112bf514a9fa2245e113dd0d72f286156120088a8061495f565b612010613248565b348d606001602081019061202491906149d2565b612063576040518060400160405280600481526020017f444f574e0000000000000000000000000000000000000000000000000000000081525061209a565b6040518060400160405280600281526020017f55500000000000000000000000000000000000000000000000000000000000008152505b8989600001518a602001518b606001518c604001516040516120c59a99989796959493929190614a02565b60405180910390a350505050505050565b6000606080600080600060606120ea613361565b6120f261338e565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b612140613128565b60648160ff1611156121d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f57726f6e67206a61636b706f74206665652070657263656e746167652076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161079c565b6006805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055565b600061221d8787878787876133bb565b90508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146122b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c9060208082526004908201527f4e4f4f4f00000000000000000000000000000000000000000000000000000000604082015260600190565b6003546040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152306024830152604482018990526064820188905260ff8716608483015260a4820186905260c482018590529091169063d505accf9060e401600060405180830381600087803b15801561234e57600080fd5b505af1158015612362573d6000803e3d6000fd5b50506003546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152306024830152604482018b905290911692506323b872dd91506064016020604051808303816000875af11580156123e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124099190614aaa565b5050505050505050565b60045473ffffffffffffffffffffffffffffffffffffffff163314612494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f6e6c792067616d6520636f6e74726f6c6c65722063616e20646f2074686973604482015260640161079c565b8383600582826040516124a89291906147f5565b9081526040519081900360200190205460ff16612521576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f506f6f6c20646f6573206e6f7420657869737400000000000000000000000000604482015260640161079c565b6000600587876040516125359291906147f5565b9081526040519081900360200190206004810154909150158061255a5750600c810154155b8061257a575080546101008104600390810b65010000000000909204900b145b15612718578054650100000000008104600390810b610100909204900b0361268457600a81015460128201546004830191600c8401916125bc8b8b868c6134ff565b6125c88b8b858c6134ff565b835460068501546040517fd86802201c3bf5d79ef71027c49cdfdee99fa298848917618ba148d098f15f7492612606928f928f929188918f90614ac7565b60405180910390a1825460068401546040517fd86802201c3bf5d79ef71027c49cdfdee99fa298848917618ba148d098f15f749261264c928f928f929187918f90614ac7565b60405180910390a18354600685015414801561266c575082546006840154145b1561267b5761267b8b8b61368e565b50505050612712565b600c8101546000901561269a5781600c0161269f565b816004015b60068101549091506126b38989848a6134ff565b815460068301546040517fd86802201c3bf5d79ef71027c49cdfdee99fa298848917618ba148d098f15f74926126f1928d928d929187918d90614ac7565b60405180910390a1815460068301540361270f5761270f898961368e565b50505b50612ada565b8054600c8201906004830190650100000000008104600390810b610100909204900b121561274b57505060048101600c82015b6000612757838361381a565b905060008863ffffffff168260a0015111612776578160a0015161277e565b8863ffffffff165b905060008185600601546127929190614834565b60068601549091505b818110156129b05760006064876005015486608001518960000185815481106127c6576127c6614b03565b90600052602060002001546127db9190614b32565b6127e6906064614b32565b6127f09190614b49565b6127fa9190614b49565b905061286887600101838154811061281457612814614b03565b600091825260209091200154885473ffffffffffffffffffffffffffffffffffffffff9091169089908590811061284d5761284d614b03565b9060005260206000200154836128639190614834565b61393f565b86600101828154811061287d5761287d614b03565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fc6f8d1369ef8a4d7d8373cd5079d27245ff35d49aba7ff57de55fbaf8d53813b8f8f8a60010186815481106128f6576128f6614b03565b6000918252602090912001548b5473ffffffffffffffffffffffffffffffffffffffff909116908c908890811061292f5761292f614b03565b9060005260206000200154868d600401898154811061295057612950614b03565b60009182526020909120600654604051612980989796959493929092019160ff8083169261010090041690614c1f565b60405180910390a28087600701546129989190614834565b600788015550806129a881614c8f565b91505061279b565b507fd86802201c3bf5d79ef71027c49cdfdee99fa298848917618ba148d098f15f748c8c87600001805490508860060154858e6040516129f596959493929190614ac7565b60405180910390a16006850181905584548103612ad35760065460408401518451612a5e9273ffffffffffffffffffffffffffffffffffffffff620100008204169260649260ff90921691612a4a9190614834565b612a549190614b32565b6128639190614b49565b60075460065460608501516020860151612aa09373ffffffffffffffffffffffffffffffffffffffff169260649261010090910460ff1691612a4a9190614834565b600654612ac99062010000900473ffffffffffffffffffffffffffffffffffffffff164761393f565b612ad38c8c61368e565b5050505050505b505050505050565b612aea613128565b73ffffffffffffffffffffffffffffffffffffffff811660009081526009602052604090205460ff1615612ce25773ffffffffffffffffffffffffffffffffffffffff8116600090815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690555b600a54811015612ce0578173ffffffffffffffffffffffffffffffffffffffff16600a8281548110612b9857612b98614b03565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1603612cce57600a8054612bcf906001906149ef565b81548110612bdf57612bdf614b03565b600091825260209091200154600a805473ffffffffffffffffffffffffffffffffffffffff9092169183908110612c1857612c18614b03565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a805480612c7157612c71614cc7565b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055612ce0565b80612cd881614c8f565b915050612b64565b505b50565b612ced613128565b60648160ff161115612d5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f57726f6e67206665652070657263656e746167652076616c7565000000000000604482015260640161079c565b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055565b612d97613128565b600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055604080516020810190915260008152600890612df29082614d41565b506040517f762f260439bb4be3ef6e4dc2786e2e7bd187d3d80b79057d7a424fe98563e33590600090a1565b60045473ffffffffffffffffffffffffffffffffffffffff163314612e9f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f6e6c792067616d6520636f6e74726f6c6c65722063616e20646f2074686973604482015260640161079c565b600160058686604051612eb39291906147f5565b90815260405190819003602001812080549215157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00909316929092179091558390600590612f0490889088906147f5565b9081526020016040518091039020600101819055508160058686604051612f2c9291906147f5565b9081526020016040518091039020600201819055508060058686604051612f549291906147f5565b908152604051908190036020019020600301555050505050565b612f76613128565b600780547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556008612fab828483614e5b565b507fbbed56c796999ec9481de9169e54d6f193c57a335189c8b82053d80e263fdbd68282604051612fdd929190614f76565b60405180910390a15050565b612ff1613128565b73ffffffffffffffffffffffffffffffffffffffff8116613041576040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526000600482015260240161079c565b612ce2816131d3565b613052613128565b73ffffffffffffffffffffffffffffffffffffffff811660009081526009602052604090205460ff16612ce25773ffffffffffffffffffffffffffffffffffffffff16600081815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055565b613130613248565b73ffffffffffffffffffffffffffffffffffffffff1661316560005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161461122d57613188613248565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240161079c565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000613252613a14565b905090565b875460018181018a5560008a8152602081209092018990558901613279613248565b8154600180820184556000938452602080852090920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff949094169390931790925560028c01805492830181558352909120016132ef878983614e5b565b506003890180546001810182556000918252602090912001613312858783614e5b565b506004890180546001810182556000918252602090912001613335838583614e5b565b508789600501600082825461334a9190614834565b909155505050600588015498975050505050505050565b60606132527f00000000000000000000000000000000000000000000000000000000000000006001613a83565b60606132527f00000000000000000000000000000000000000000000000000000000000000006002613a83565b6003546040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808916600483015260009283927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928b9230928c9290911690637ecebe0090602401602060405180830381865afa158015613458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347c9190614f92565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120905060006134e482613b2e565b90506134f281878787613b76565b9998505050505050505050565b60068201548254600091613512916149ef565b905060008263ffffffff1682116135295781613531565b8263ffffffff165b905060008185600601546135459190614834565b60068601549091505b8181101561367d576135b786600101828154811061356e5761356e614b03565b600091825260209091200154875473ffffffffffffffffffffffffffffffffffffffff909116908890849081106135a7576135a7614b03565b906000526020600020015461393f565b7fb9b3cf88e16ddd6b941ffa04b763047af17bafd3cdecef4d26d46f43e64c120588888860010184815481106135ef576135ef614b03565b600091825260209091200154895473ffffffffffffffffffffffffffffffffffffffff909116908a908690811061362857613628614b03565b90600052602060002001548a600401868154811061364857613648614b03565b90600052602060002001604051613663959493929190614fab565b60405180910390a18061367581614c8f565b91505061354e565b506006909401939093555050505050565b600582826040516136a09291906147f5565b90815260405190819003602001902060040160006136be8282613f6d565b6136cc600183016000613f6d565b6136da600283016000613f8b565b6136e8600383016000613f8b565b6136f6600483016000613f8b565b50600060058281018290556006830182905560079092015560405161371e90849084906147f5565b908152604051908190036020019020600c01600061373c8282613f6d565b61374a600183016000613f6d565b613758600283016000613f8b565b613766600383016000613f8b565b613774600483016000613f8b565b50600060058281018290556006830182905560079092015560405161379c90849084906147f5565b90815260405190819003602001812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ff1690556005906137e190849084906147f5565b90815260405190819003602001902080547fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff1690555050565b6138536040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600582015460065460009160649161386e919060ff16614b32565b6138789190614b49565b600584015460065491925060009160649161389a91610100900460ff16614b32565b6138a49190614b49565b905060006138b28284614834565b600687015487549192506000916138c991906149ef565b905060008287600501546138dd91906149ef565b905060008588600501546138f191906149ef565b9050600085896005015461390591906149ef565b6040805160c08101825298895260208901979097529587019190915250606085019390935260808401929092525060a08201529392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16600084604051600060405180830381858888f193505050503d806000811461399d576040519150601f19603f3d011682016040523d82523d6000602084013e6139a2565b606091505b509150915081613a0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f436f756c646e27742073656e6420657468657200000000000000000000000000604482015260640161079c565b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163303613a7e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b606060ff8314613a9d57613a9683613ba4565b9050610715565b818054613aa990614847565b80601f0160208091040260200160405190810160405280929190818152602001828054613ad590614847565b8015613b225780601f10613af757610100808354040283529160200191613b22565b820191906000526020600020905b815481529060010190602001808311613b0557829003601f168201915b50505050509050610715565b6000610715613b3b613be3565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b600080600080613b8888888888613d2e565b925092509250613b988282613e28565b50909695505050505050565b60606000613bb183613f2c565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000606080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166384b0196e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015613c55573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052613c9b91908101906150cf565b50508351602094850120835193850193909320600354604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8189015280820196909652606086019290925246608086015273ffffffffffffffffffffffffffffffffffffffff1660a0808601919091528151808603909101815260c0909401905250508051910120949350505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115613d695750600091506003905082613e1e565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015613dbd573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116613e1457506000925060019150829050613e1e565b9250600091508190505b9450945094915050565b6000826003811115613e3c57613e3c6151b4565b03613e45575050565b6001826003811115613e5957613e596151b4565b03613e90576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115613ea457613ea46151b4565b03613ede576040517ffce698f70000000000000000000000000000000000000000000000000000000081526004810182905260240161079c565b6003826003811115613ef257613ef26151b4565b03612ce0576040517fd78bce0c0000000000000000000000000000000000000000000000000000000081526004810182905260240161079c565b600060ff8216601f811115610715576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5080546000825590600052602060002090810190612ce29190613fa9565b5080546000825590600052602060002090810190612ce29190613fc2565b5b80821115613fbe5760008155600101613faa565b5090565b80821115613fbe576000613fd68282613fdf565b50600101613fc2565b508054613feb90614847565b6000825580601f10613ffb575050565b601f016020900490600052602060002090810190612ce29190613fa9565b60008083601f84011261402b57600080fd5b50813567ffffffffffffffff81111561404357600080fd5b60208301915083602082850101111561405b57600080fd5b9250929050565b6000806020838503121561407557600080fd5b823567ffffffffffffffff81111561408c57600080fd5b61409885828601614019565b90969095509350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114612ce257600080fd5b6000602082840312156140d857600080fd5b81356140e3816140a4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614160576141606140ea565b604052919050565b600067ffffffffffffffff821115614182576141826140ea565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6000602082840312156141c057600080fd5b813567ffffffffffffffff8111156141d757600080fd5b8201601f810184136141e857600080fd5b80356141fb6141f682614168565b614119565b81815285602083850101111561421057600080fd5b81602084016020830137600091810160200191909152949350505050565b600081518084526020808501945080840160005b8381101561425e57815187529582019590820190600101614242565b509495945050505050565b600081518084526020808501945080840160005b8381101561425e57815173ffffffffffffffffffffffffffffffffffffffff168752958201959082019060010161427d565b60005b838110156142ca5781810151838201526020016142b2565b50506000910152565b600081518084526142eb8160208601602086016142af565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156143655782840389526143538483516142d3565b9885019893509084019060010161433b565b5091979650505050505050565b600061010082518185526143888286018261422e565b915050602083015184820360208601526143a28282614269565b915050604083015184820360408601526143bc828261431d565b915050606083015184820360608601526143d6828261431d565b915050608083015184820360808601526143f0828261431d565b91505060a083015160a085015260c083015160c085015260e083015160e08501528091505092915050565b60006101608d151583528c60030b60208401528b60030b60408401528a60608401528960808401528860a08401528060c084015261445b81840189614372565b905082810360e084015261446f8188614372565b60079690960b61010084015250506101208101929092526101409091015298975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613b9857835173ffffffffffffffffffffffffffffffffffffffff16835292840192918401916001016144b5565b6020815260006140e360208301846142d3565b8035600781900b811461450c57600080fd5b919050565b803563ffffffff8116811461450c57600080fd5b600080600080600080600060c0888a03121561454057600080fd5b873567ffffffffffffffff81111561455757600080fd5b6145638a828b01614019565b90985096506145769050602089016144fa565b9450604088013593506060880135925060808801358060030b811461459a57600080fd5b91506145a860a08901614511565b905092959891949750929550565b6000602082840312156145c857600080fd5b813567ffffffffffffffff8111156145df57600080fd5b820160a081850312156140e357600080fd5b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e08184015261462d60e084018a6142d3565b838103604085015261463f818a6142d3565b6060850189905273ffffffffffffffffffffffffffffffffffffffff8816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561469e57835183529284019291840191600101614682565b50909c9b505050505050505050505050565b803560ff8116811461450c57600080fd5b6000602082840312156146d357600080fd5b6140e3826146b0565b60008060008060008060c087890312156146f557600080fd5b8635614700816140a4565b9550602087013594506040870135935061471c606088016146b0565b92506080870135915060a087013590509295509295509295565b6000806000806060858703121561474c57600080fd5b843567ffffffffffffffff81111561476357600080fd5b61476f87828801614019565b9095509350614782905060208601614511565b9150614790604086016144fa565b905092959194509250565b6000806000806000608086880312156147b357600080fd5b853567ffffffffffffffff8111156147ca57600080fd5b6147d688828901614019565b9099909850602088013597604081013597506060013595509350505050565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561071557610715614805565b600181811c9082168061485b57607f821691505b602082108103614894577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60c0815260006148f760c08301898b61489a565b60079790970b60208301525060039490940b60408501526060840192909252608083015260a09091015292915050565b60808152600061493b60808301878961489a565b60079590950b602083015250600392830b6040820152910b60609091015292915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261499457600080fd5b83018035915067ffffffffffffffff8211156149af57600080fd5b60200191503681900382131561405b57600080fd5b8015158114612ce257600080fd5b6000602082840312156149e457600080fd5b81356140e3816149c4565b8181038181111561071557610715614805565b6000610120808352614a178184018d8f61489a565b905073ffffffffffffffffffffffffffffffffffffffff8b1660208401528960408401528281036060840152614a4d818a6142d3565b905087608084015282810360a0840152614a6781886142d3565b905082810360c0840152614a7b81876142d3565b90508460070b60e0840152828103610100840152614a9981856142d3565b9d9c50505050505050505050505050565b600060208284031215614abc57600080fd5b81516140e3816149c4565b60a081526000614adb60a08301888a61489a565b90508560208301528460408301528360608301528260070b6080830152979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761071557610715614805565b600082614b7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008154614b9181614847565b808552602060018381168015614bae5760018114614be657614c14565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516838901528284151560051b8901019550614c14565b866000528260002060005b85811015614c0c5781548a8201860152908301908401614bf1565b890184019650505b505050505092915050565b60e081526000614c3360e083018a8c61489a565b73ffffffffffffffffffffffffffffffffffffffff891660208401528760408401528660608401528281036080840152614c6d8187614b84565b91505060ff841660a083015260ff831660c08301529998505050505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614cc057614cc0614805565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b601f821115614d3c57600081815260208120601f850160051c81016020861015614d1d5750805b601f850160051c820191505b81811015612ada57828155600101614d29565b505050565b815167ffffffffffffffff811115614d5b57614d5b6140ea565b614d6f81614d698454614847565b84614cf6565b602080601f831160018114614dc25760008415614d8c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555612ada565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015614e0f57888601518255948401946001909101908401614df0565b5085821015614e4b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff831115614e7357614e736140ea565b614e8783614e818354614847565b83614cf6565b6000601f841160018114614ed95760008515614ea35750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355614f6f565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b82811015614f285786850135825560209485019460019092019101614f08565b5086821015614f63577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b602081526000614f8a60208301848661489a565b949350505050565b600060208284031215614fa457600080fd5b5051919050565b608081526000614fbf60808301878961489a565b73ffffffffffffffffffffffffffffffffffffffff861660208401528460408401528281036060840152614ff38185614b84565b98975050505050505050565b600082601f83011261501057600080fd5b815161501e6141f682614168565b81815284602083860101111561503357600080fd5b614f8a8260208301602087016142af565b805161450c816140a4565b600082601f83011261506057600080fd5b8151602067ffffffffffffffff82111561507c5761507c6140ea565b8160051b61508b828201614119565b92835284810182019282810190878511156150a557600080fd5b83870192505b848310156150c4578251825291830191908301906150ab565b979650505050505050565b600080600080600080600060e0888a0312156150ea57600080fd5b87517fff000000000000000000000000000000000000000000000000000000000000008116811461511a57600080fd5b602089015190975067ffffffffffffffff8082111561513857600080fd5b6151448b838c01614fff565b975060408a015191508082111561515a57600080fd5b6151668b838c01614fff565b965060608a0151955061517b60808b01615044565b945060a08a0151935060c08a015191508082111561519857600080fd5b506151a58a828b0161504f565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212203b1193deeaead2ea49bc6a6a1f758659a1b3453c3a521cc121e71f8f7829497264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "makeTradeFake(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "=================   FakeTrade ============================="
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3683,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2183,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2185,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3906,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ERC20Permit)1056"
      },
      {
        "astId": 3978,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "gameController",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3983,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "pools",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes_memory_ptr,t_struct(Round)3963_storage)"
      },
      {
        "astId": 3986,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "feePercentage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 3989,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "feeJackpotPercentage",
        "offset": 1,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 3993,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "feeAddress",
        "offset": 2,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3997,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "feeJackpotAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3999,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "isRunning",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 4001,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "notRunningReason",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes_storage"
      },
      {
        "astId": 4005,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "allowedContracts",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4008,
        "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
        "label": "allowedContractsList",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20Permit)1056": {
        "encoding": "inplace",
        "label": "contract ERC20Permit",
        "numberOfBytes": "20"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_int64": {
        "encoding": "inplace",
        "label": "int64",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(Round)3963_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct UpVsDownGameV6.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)3963_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BetGroup)3938_storage": {
        "encoding": "inplace",
        "label": "struct UpVsDownGameV6.BetGroup",
        "members": [
          {
            "astId": 3919,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "bets",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3922,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "addresses",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3925,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "avatars",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3928,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "countries",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3931,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "whiteLabelIds",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3933,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "total",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3935,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "distributedCount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 3937,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "totalDistributed",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Round)3963_storage": {
        "encoding": "inplace",
        "label": "struct UpVsDownGameV6.Round",
        "members": [
          {
            "astId": 3940,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "created",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3942,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "startPrice",
            "offset": 1,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 3944,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "endPrice",
            "offset": 5,
            "slot": "0",
            "type": "t_int32"
          },
          {
            "astId": 3946,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "minBetAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3948,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "maxBetAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3950,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "poolBetsLimit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3953,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "upBetGroup",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(BetGroup)3938_storage"
          },
          {
            "astId": 3956,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "downBetGroup",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(BetGroup)3938_storage"
          },
          {
            "astId": 3958,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "roundStartTime",
            "offset": 0,
            "slot": "20",
            "type": "t_int64"
          },
          {
            "astId": 3960,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "tradesStartTimeMS",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 3962,
            "contract": "contracts/UpVsDownGameV6.sol:UpVsDownGameV6",
            "label": "tradesEndTimeMS",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "736"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}